/**
 * Farsava API
 * Farsava API. Speech Recognition and Text to Speech by applying powerful deep neural network models.
 *
 * OpenAPI spec version: 1.0.5
 * Contact: amir@amerandish.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAILanguageModelApi_H
#define OAI_OAILanguageModelApi_H

#include "OAIHttpRequest.h"

#include "farsava_model/OAIError.h"
#include "farsava_model/OAILanguageModelResult.h"
#include "farsava_model/OAILanguageModelTrainRequestBody.h"
#include <QString>

#include <QObject>

namespace Farsava {

class OAILanguageModelApi: public QObject {
    Q_OBJECT

public:
    OAILanguageModelApi();
    OAILanguageModelApi(QString host, QString basePath);
    ~OAILanguageModelApi();

    QString host;
    QString basePath;
    QMap<QString, QString> defaultHeaders;

    void getLanguageModelById(const QString& language_model_id);
    void getLanguageModelList();
    void trainLanguageModel(const OAILanguageModelTrainRequestBody& oai_language_model_train_request_body);
    
private:
    void getLanguageModelByIdCallback (OAIHttpRequestWorker * worker);
    void getLanguageModelListCallback (OAIHttpRequestWorker * worker);
    void trainLanguageModelCallback (OAIHttpRequestWorker * worker);
    
signals:
    void getLanguageModelByIdSignal(OAILanguageModelResult summary);
    void getLanguageModelListSignal(QList<OAILanguageModelResult> summary);
    void trainLanguageModelSignal(OAILanguageModelResult summary);
    
    void getLanguageModelByIdSignalFull(OAIHttpRequestWorker* worker, OAILanguageModelResult summary);
    void getLanguageModelListSignalFull(OAIHttpRequestWorker* worker, QList<OAILanguageModelResult> summary);
    void trainLanguageModelSignalFull(OAIHttpRequestWorker* worker, OAILanguageModelResult summary);
    
    void getLanguageModelByIdSignalE(OAILanguageModelResult summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getLanguageModelListSignalE(QList<OAILanguageModelResult> summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void trainLanguageModelSignalE(OAILanguageModelResult summary, QNetworkReply::NetworkError error_type, QString& error_str);
    
    void getLanguageModelByIdSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getLanguageModelListSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void trainLanguageModelSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    
};

}
#endif

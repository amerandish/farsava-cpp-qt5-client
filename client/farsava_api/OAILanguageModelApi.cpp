/**
 * Farsava API
 * Farsava API. Speech Recognition and Text to Speech by applying powerful deep neural network models.
 *
 * OpenAPI spec version: 1.0.5
 * Contact: amir@amerandish.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILanguageModelApi.h"
#include "OAIHelpers.h"

#include <QJsonArray>
#include <QJsonDocument>

namespace Farsava {

OAILanguageModelApi::OAILanguageModelApi() {

}

OAILanguageModelApi::~OAILanguageModelApi() {

}

OAILanguageModelApi::OAILanguageModelApi(QString host, QString basePath) {
    this->host = host;
    this->basePath = basePath;
}

void
OAILanguageModelApi::getLanguageModelById(const QString& language_model_id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/speech/languagemodels/{languageModelId}");
    QString language_model_idPathParam("{"); 
    language_model_idPathParam.append("languageModelId").append("}");
    fullPath.replace(language_model_idPathParam, ::Farsava::toStringValue(language_model_id));
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAILanguageModelApi::getLanguageModelByIdCallback);

    worker->execute(&input);
}

void
OAILanguageModelApi::getLanguageModelByIdCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    OAILanguageModelResult output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getLanguageModelByIdSignal(output);
        emit getLanguageModelByIdSignalFull(worker, output);
    } else {
        emit getLanguageModelByIdSignalE(output, error_type, error_str);
        emit getLanguageModelByIdSignalEFull(worker, error_type, error_str);
    }
}

void
OAILanguageModelApi::getLanguageModelList() {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/speech/languagemodels");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAILanguageModelApi::getLanguageModelListCallback);

    worker->execute(&input);
}

void
OAILanguageModelApi::getLanguageModelListCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    QList<OAILanguageModelResult> output;
    QString json(worker->response);
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    foreach(QJsonValue obj, jsonArray) {
        OAILanguageModelResult val;
        ::Farsava::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getLanguageModelListSignal(output);
        emit getLanguageModelListSignalFull(worker, output);
    } else {
        emit getLanguageModelListSignalE(output, error_type, error_str);
        emit getLanguageModelListSignalEFull(worker, error_type, error_str);
    }
}

void
OAILanguageModelApi::trainLanguageModel(const OAILanguageModelTrainRequestBody& oai_language_model_train_request_body) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/speech/languagemodels");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "POST");

    
    QString output = oai_language_model_train_request_body.asJson();
    input.request_body.append(output);
    

    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAILanguageModelApi::trainLanguageModelCallback);

    worker->execute(&input);
}

void
OAILanguageModelApi::trainLanguageModelCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    OAILanguageModelResult output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit trainLanguageModelSignal(output);
        emit trainLanguageModelSignalFull(worker, output);
    } else {
        emit trainLanguageModelSignalE(output, error_type, error_str);
        emit trainLanguageModelSignalEFull(worker, error_type, error_str);
    }
}


}

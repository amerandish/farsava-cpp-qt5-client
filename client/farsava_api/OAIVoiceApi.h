/**
 * Farsava API
 * Farsava API. Speech Recognition and Text to Speech by applying powerful deep neural network models.
 *
 * OpenAPI spec version: 1.0.5
 * Contact: amir@amerandish.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIVoiceApi_H
#define OAI_OAIVoiceApi_H

#include "OAIHttpRequest.h"

#include "farsava_model/OAIError.h"
#include "farsava_model/OAIHealthCheckResponseBody.h"
#include "farsava_model/OAITTSRequestBody.h"
#include "farsava_model/OAITTSResponseBody.h"
#include "farsava_model/OAIVoiceSelectionParams.h"
#include <QString>

#include <QObject>

namespace Farsava {

class OAIVoiceApi: public QObject {
    Q_OBJECT

public:
    OAIVoiceApi();
    OAIVoiceApi(QString host, QString basePath);
    ~OAIVoiceApi();

    QString host;
    QString basePath;
    QMap<QString, QString> defaultHeaders;

    void getVoicesList();
    void synthesize(const OAITTSRequestBody& oaitts_request_body);
    void voiceHealthCheck();
    
private:
    void getVoicesListCallback (OAIHttpRequestWorker * worker);
    void synthesizeCallback (OAIHttpRequestWorker * worker);
    void voiceHealthCheckCallback (OAIHttpRequestWorker * worker);
    
signals:
    void getVoicesListSignal(QList<OAIVoiceSelectionParams> summary);
    void synthesizeSignal(OAITTSResponseBody summary);
    void voiceHealthCheckSignal(OAIHealthCheckResponseBody summary);
    
    void getVoicesListSignalFull(OAIHttpRequestWorker* worker, QList<OAIVoiceSelectionParams> summary);
    void synthesizeSignalFull(OAIHttpRequestWorker* worker, OAITTSResponseBody summary);
    void voiceHealthCheckSignalFull(OAIHttpRequestWorker* worker, OAIHealthCheckResponseBody summary);
    
    void getVoicesListSignalE(QList<OAIVoiceSelectionParams> summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void synthesizeSignalE(OAITTSResponseBody summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void voiceHealthCheckSignalE(OAIHealthCheckResponseBody summary, QNetworkReply::NetworkError error_type, QString& error_str);
    
    void getVoicesListSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void synthesizeSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void voiceHealthCheckSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    
};

}
#endif

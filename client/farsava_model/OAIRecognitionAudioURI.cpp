/**
 * Farsava API
 * Farsava API. Speech Recognition and Text to Speech by applying powerful deep neural network models.
 *
 * OpenAPI spec version: 1.0.5
 * Contact: amir@amerandish.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIRecognitionAudioURI.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Farsava {

OAIRecognitionAudioURI::OAIRecognitionAudioURI(QString json) {
    this->init();
    this->fromJson(json);
}

OAIRecognitionAudioURI::OAIRecognitionAudioURI() {
    this->init();
}

OAIRecognitionAudioURI::~OAIRecognitionAudioURI() {

}

void
OAIRecognitionAudioURI::init() {
    
    m_uri_isSet = false;
    m_uri_isValid = false;
    }

void
OAIRecognitionAudioURI::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIRecognitionAudioURI::fromJsonObject(QJsonObject json) {
    
    m_uri_isValid = ::Farsava::fromJsonValue(uri, json[QString("uri")]);
    
    
}

QString
OAIRecognitionAudioURI::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIRecognitionAudioURI::asJsonObject() const {
    QJsonObject obj;
	if(m_uri_isSet){
        obj.insert(QString("uri"), ::Farsava::toJsonValue(uri));
    }
    return obj;
}


QString
OAIRecognitionAudioURI::getUri() const {
    return uri;
}
void
OAIRecognitionAudioURI::setUri(const QString &uri) {
    this->uri = uri;
    this->m_uri_isSet = true;
}

bool
OAIRecognitionAudioURI::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(m_uri_isSet){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

bool
OAIRecognitionAudioURI::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_uri_isValid && true;
}

}


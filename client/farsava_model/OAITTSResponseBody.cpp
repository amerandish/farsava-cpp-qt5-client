/**
 * Farsava API
 * Farsava API. Speech Recognition and Text to Speech by applying powerful deep neural network models.
 *
 * OpenAPI spec version: 1.0.5
 * Contact: amir@amerandish.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAITTSResponseBody.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Farsava {

OAITTSResponseBody::OAITTSResponseBody(QString json) {
    this->init();
    this->fromJson(json);
}

OAITTSResponseBody::OAITTSResponseBody() {
    this->init();
}

OAITTSResponseBody::~OAITTSResponseBody() {

}

void
OAITTSResponseBody::init() {
    
    m_audio_content_isSet = false;
    m_audio_content_isValid = false;
    }

void
OAITTSResponseBody::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAITTSResponseBody::fromJsonObject(QJsonObject json) {
    
    m_audio_content_isValid = ::Farsava::fromJsonValue(audio_content, json[QString("audioContent")]);
    
    
}

QString
OAITTSResponseBody::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAITTSResponseBody::asJsonObject() const {
    QJsonObject obj;
	if(m_audio_content_isSet){
        obj.insert(QString("audioContent"), ::Farsava::toJsonValue(audio_content));
    }
    return obj;
}


QByteArray
OAITTSResponseBody::getAudioContent() const {
    return audio_content;
}
void
OAITTSResponseBody::setAudioContent(const QByteArray &audio_content) {
    this->audio_content = audio_content;
    this->m_audio_content_isSet = true;
}

bool
OAITTSResponseBody::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(m_audio_content_isSet){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

bool
OAITTSResponseBody::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

}


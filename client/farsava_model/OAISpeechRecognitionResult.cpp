/**
 * Farsava API
 * Farsava API. Speech Recognition and Text to Speech by applying powerful deep neural network models.
 *
 * OpenAPI spec version: 1.0.5
 * Contact: amir@amerandish.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAISpeechRecognitionResult.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Farsava {

OAISpeechRecognitionResult::OAISpeechRecognitionResult(QString json) {
    this->init();
    this->fromJson(json);
}

OAISpeechRecognitionResult::OAISpeechRecognitionResult() {
    this->init();
}

OAISpeechRecognitionResult::~OAISpeechRecognitionResult() {

}

void
OAISpeechRecognitionResult::init() {
    
    m_transcript_isSet = false;
    m_transcript_isValid = false;
    
    m_confidence_isSet = false;
    m_confidence_isValid = false;
    
    m_words_isSet = false;
    m_words_isValid = false;
    }

void
OAISpeechRecognitionResult::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAISpeechRecognitionResult::fromJsonObject(QJsonObject json) {
    
    m_transcript_isValid = ::Farsava::fromJsonValue(transcript, json[QString("transcript")]);
    
    
    m_confidence_isValid = ::Farsava::fromJsonValue(confidence, json[QString("confidence")]);
    
    
    
    m_words_isValid = ::Farsava::fromJsonValue(words, json[QString("words")]);
    
}

QString
OAISpeechRecognitionResult::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAISpeechRecognitionResult::asJsonObject() const {
    QJsonObject obj;
	if(m_transcript_isSet){
        obj.insert(QString("transcript"), ::Farsava::toJsonValue(transcript));
    }
	if(m_confidence_isSet){
        obj.insert(QString("confidence"), ::Farsava::toJsonValue(confidence));
    }
	
    if(words.size() > 0){
        obj.insert(QString("words"), ::Farsava::toJsonValue(words));
    } 
    return obj;
}


QString
OAISpeechRecognitionResult::getTranscript() const {
    return transcript;
}
void
OAISpeechRecognitionResult::setTranscript(const QString &transcript) {
    this->transcript = transcript;
    this->m_transcript_isSet = true;
}


double
OAISpeechRecognitionResult::getConfidence() const {
    return confidence;
}
void
OAISpeechRecognitionResult::setConfidence(const double &confidence) {
    this->confidence = confidence;
    this->m_confidence_isSet = true;
}


QList<OAIWordInfo>
OAISpeechRecognitionResult::getWords() const {
    return words;
}
void
OAISpeechRecognitionResult::setWords(const QList<OAIWordInfo> &words) {
    this->words = words;
    this->m_words_isSet = true;
}

bool
OAISpeechRecognitionResult::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(m_transcript_isSet){ isObjectUpdated = true; break;}
    
        if(m_confidence_isSet){ isObjectUpdated = true; break;}
    
        if(words.size() > 0){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

bool
OAISpeechRecognitionResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

}


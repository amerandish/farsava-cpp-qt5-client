/**
 * Farsava API
 * Farsava API. Speech Recognition and Text to Speech by applying powerful deep neural network models.
 *
 * OpenAPI spec version: 1.0.5
 * Contact: amir@amerandish.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIAudioEncoding.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Farsava {

OAIAudioEncoding::OAIAudioEncoding(QString json) {
    this->init();
    this->fromJson(json);
}

OAIAudioEncoding::OAIAudioEncoding() {
    this->init();
}

OAIAudioEncoding::~OAIAudioEncoding() {

}

void
OAIAudioEncoding::init() {
    
    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIAudioEncoding::INVALID_VALUE_OPENAPI_GENERATED;
}

void
OAIAudioEncoding::fromJson(QString jsonString) {
     
    if ( jsonString.compare("LINEAR16", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAudioEncoding::LINEAR16;
        m_value_isValid = true;
    } 
    else if ( jsonString.compare("FLAC", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAudioEncoding::FLAC;
        m_value_isValid = true;
    } 
    else if ( jsonString.compare("MP3", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAudioEncoding::MP3;
        m_value_isValid = true;
    }
}

void
OAIAudioEncoding::fromJsonValue(QJsonValue json) {
    
    fromJson(json.toString());
}

QString
OAIAudioEncoding::asJson () const {
    
    QString val;
    switch (m_value){
        case eOAIAudioEncoding::LINEAR16:
            val = "LINEAR16";
            break;
        case eOAIAudioEncoding::FLAC:
            val = "FLAC";
            break;
        case eOAIAudioEncoding::MP3:
            val = "MP3";
            break; 
        default:
            break;
    }
    return val;
}

QJsonValue
OAIAudioEncoding::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIAudioEncoding::eOAIAudioEncoding OAIAudioEncoding::getValue() const {
    return m_value;
}

void OAIAudioEncoding::setValue(const OAIAudioEncoding::eOAIAudioEncoding& value){
    m_value = value;
    m_value_isSet = true;
}
bool
OAIAudioEncoding::isSet() const {
    
    return m_value_isSet;
}

bool
OAIAudioEncoding::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

}


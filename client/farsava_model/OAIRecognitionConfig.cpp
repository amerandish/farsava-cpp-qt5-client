/**
 * Farsava API
 * Farsava API. Speech Recognition and Text to Speech by applying powerful deep neural network models.
 *
 * OpenAPI spec version: 1.0.5
 * Contact: amir@amerandish.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIRecognitionConfig.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Farsava {

OAIRecognitionConfig::OAIRecognitionConfig(QString json) {
    this->init();
    this->fromJson(json);
}

OAIRecognitionConfig::OAIRecognitionConfig() {
    this->init();
}

OAIRecognitionConfig::~OAIRecognitionConfig() {

}

void
OAIRecognitionConfig::init() {
    
    m_audio_encoding_isSet = false;
    m_audio_encoding_isValid = false;
    
    m_sample_rate_hertz_isSet = false;
    m_sample_rate_hertz_isValid = false;
    
    m_language_code_isSet = false;
    m_language_code_isValid = false;
    
    m_max_alternatives_isSet = false;
    m_max_alternatives_isValid = false;
    
    m_profanity_filter_isSet = false;
    m_profanity_filter_isValid = false;
    
    m_asr_model_isSet = false;
    m_asr_model_isValid = false;
    
    m_language_model_isSet = false;
    m_language_model_isValid = false;
    }

void
OAIRecognitionConfig::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIRecognitionConfig::fromJsonObject(QJsonObject json) {
    
    m_audio_encoding_isValid = ::Farsava::fromJsonValue(audio_encoding, json[QString("audioEncoding")]);
    
    
    m_sample_rate_hertz_isValid = ::Farsava::fromJsonValue(sample_rate_hertz, json[QString("sampleRateHertz")]);
    
    
    m_language_code_isValid = ::Farsava::fromJsonValue(language_code, json[QString("languageCode")]);
    
    
    m_max_alternatives_isValid = ::Farsava::fromJsonValue(max_alternatives, json[QString("maxAlternatives")]);
    
    
    m_profanity_filter_isValid = ::Farsava::fromJsonValue(profanity_filter, json[QString("profanityFilter")]);
    
    
    m_asr_model_isValid = ::Farsava::fromJsonValue(asr_model, json[QString("asrModel")]);
    
    
    m_language_model_isValid = ::Farsava::fromJsonValue(language_model, json[QString("languageModel")]);
    
    
}

QString
OAIRecognitionConfig::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIRecognitionConfig::asJsonObject() const {
    QJsonObject obj;
	if(audio_encoding.isSet()){
        obj.insert(QString("audioEncoding"), ::Farsava::toJsonValue(audio_encoding));
    }
	if(m_sample_rate_hertz_isSet){
        obj.insert(QString("sampleRateHertz"), ::Farsava::toJsonValue(sample_rate_hertz));
    }
	if(language_code.isSet()){
        obj.insert(QString("languageCode"), ::Farsava::toJsonValue(language_code));
    }
	if(m_max_alternatives_isSet){
        obj.insert(QString("maxAlternatives"), ::Farsava::toJsonValue(max_alternatives));
    }
	if(m_profanity_filter_isSet){
        obj.insert(QString("profanityFilter"), ::Farsava::toJsonValue(profanity_filter));
    }
	if(asr_model.isSet()){
        obj.insert(QString("asrModel"), ::Farsava::toJsonValue(asr_model));
    }
	if(m_language_model_isSet){
        obj.insert(QString("languageModel"), ::Farsava::toJsonValue(language_model));
    }
    return obj;
}


OAIAudioEncoding
OAIRecognitionConfig::getAudioEncoding() const {
    return audio_encoding;
}
void
OAIRecognitionConfig::setAudioEncoding(const OAIAudioEncoding &audio_encoding) {
    this->audio_encoding = audio_encoding;
    this->m_audio_encoding_isSet = true;
}


qint32
OAIRecognitionConfig::getSampleRateHertz() const {
    return sample_rate_hertz;
}
void
OAIRecognitionConfig::setSampleRateHertz(const qint32 &sample_rate_hertz) {
    this->sample_rate_hertz = sample_rate_hertz;
    this->m_sample_rate_hertz_isSet = true;
}


OAILanguageCode
OAIRecognitionConfig::getLanguageCode() const {
    return language_code;
}
void
OAIRecognitionConfig::setLanguageCode(const OAILanguageCode &language_code) {
    this->language_code = language_code;
    this->m_language_code_isSet = true;
}


qint32
OAIRecognitionConfig::getMaxAlternatives() const {
    return max_alternatives;
}
void
OAIRecognitionConfig::setMaxAlternatives(const qint32 &max_alternatives) {
    this->max_alternatives = max_alternatives;
    this->m_max_alternatives_isSet = true;
}


bool
OAIRecognitionConfig::isProfanityFilter() const {
    return profanity_filter;
}
void
OAIRecognitionConfig::setProfanityFilter(const bool &profanity_filter) {
    this->profanity_filter = profanity_filter;
    this->m_profanity_filter_isSet = true;
}


OAISpeechRecognitionModel
OAIRecognitionConfig::getAsrModel() const {
    return asr_model;
}
void
OAIRecognitionConfig::setAsrModel(const OAISpeechRecognitionModel &asr_model) {
    this->asr_model = asr_model;
    this->m_asr_model_isSet = true;
}


QString
OAIRecognitionConfig::getLanguageModel() const {
    return language_model;
}
void
OAIRecognitionConfig::setLanguageModel(const QString &language_model) {
    this->language_model = language_model;
    this->m_language_model_isSet = true;
}

bool
OAIRecognitionConfig::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(audio_encoding.isSet()){ isObjectUpdated = true; break;}
    
        if(m_sample_rate_hertz_isSet){ isObjectUpdated = true; break;}
    
        if(language_code.isSet()){ isObjectUpdated = true; break;}
    
        if(m_max_alternatives_isSet){ isObjectUpdated = true; break;}
    
        if(m_profanity_filter_isSet){ isObjectUpdated = true; break;}
    
        if(asr_model.isSet()){ isObjectUpdated = true; break;}
    
        if(m_language_model_isSet){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

bool
OAIRecognitionConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_audio_encoding_isValid && m_sample_rate_hertz_isValid && m_language_code_isValid && true;
}

}


/**
 * Farsava API
 * Farsava API. Speech Recognition and Text to Speech by applying powerful deep neural network models.
 *
 * OpenAPI spec version: 1.0.5
 * Contact: amir@amerandish.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIASRResponseBody.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Farsava {

OAIASRResponseBody::OAIASRResponseBody(QString json) {
    this->init();
    this->fromJson(json);
}

OAIASRResponseBody::OAIASRResponseBody() {
    this->init();
}

OAIASRResponseBody::~OAIASRResponseBody() {

}

void
OAIASRResponseBody::init() {
    
    m_transcription_id_isSet = false;
    m_transcription_id_isValid = false;
    
    m_duration_isSet = false;
    m_duration_isValid = false;
    
    m_inference_time_isSet = false;
    m_inference_time_isValid = false;
    
    m_status_isSet = false;
    m_status_isValid = false;
    
    m_results_isSet = false;
    m_results_isValid = false;
    }

void
OAIASRResponseBody::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIASRResponseBody::fromJsonObject(QJsonObject json) {
    
    m_transcription_id_isValid = ::Farsava::fromJsonValue(transcription_id, json[QString("transcriptionId")]);
    
    
    m_duration_isValid = ::Farsava::fromJsonValue(duration, json[QString("duration")]);
    
    
    m_inference_time_isValid = ::Farsava::fromJsonValue(inference_time, json[QString("inferenceTime")]);
    
    
    m_status_isValid = ::Farsava::fromJsonValue(status, json[QString("status")]);
    
    
    
    m_results_isValid = ::Farsava::fromJsonValue(results, json[QString("results")]);
    
}

QString
OAIASRResponseBody::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIASRResponseBody::asJsonObject() const {
    QJsonObject obj;
	if(m_transcription_id_isSet){
        obj.insert(QString("transcriptionId"), ::Farsava::toJsonValue(transcription_id));
    }
	if(m_duration_isSet){
        obj.insert(QString("duration"), ::Farsava::toJsonValue(duration));
    }
	if(m_inference_time_isSet){
        obj.insert(QString("inferenceTime"), ::Farsava::toJsonValue(inference_time));
    }
	if(status.isSet()){
        obj.insert(QString("status"), ::Farsava::toJsonValue(status));
    }
	
    if(results.size() > 0){
        obj.insert(QString("results"), ::Farsava::toJsonValue(results));
    } 
    return obj;
}


QString
OAIASRResponseBody::getTranscriptionId() const {
    return transcription_id;
}
void
OAIASRResponseBody::setTranscriptionId(const QString &transcription_id) {
    this->transcription_id = transcription_id;
    this->m_transcription_id_isSet = true;
}


double
OAIASRResponseBody::getDuration() const {
    return duration;
}
void
OAIASRResponseBody::setDuration(const double &duration) {
    this->duration = duration;
    this->m_duration_isSet = true;
}


double
OAIASRResponseBody::getInferenceTime() const {
    return inference_time;
}
void
OAIASRResponseBody::setInferenceTime(const double &inference_time) {
    this->inference_time = inference_time;
    this->m_inference_time_isSet = true;
}


OAIASRStatus
OAIASRResponseBody::getStatus() const {
    return status;
}
void
OAIASRResponseBody::setStatus(const OAIASRStatus &status) {
    this->status = status;
    this->m_status_isSet = true;
}


QList<OAISpeechRecognitionResult>
OAIASRResponseBody::getResults() const {
    return results;
}
void
OAIASRResponseBody::setResults(const QList<OAISpeechRecognitionResult> &results) {
    this->results = results;
    this->m_results_isSet = true;
}

bool
OAIASRResponseBody::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(m_transcription_id_isSet){ isObjectUpdated = true; break;}
    
        if(m_duration_isSet){ isObjectUpdated = true; break;}
    
        if(m_inference_time_isSet){ isObjectUpdated = true; break;}
    
        if(status.isSet()){ isObjectUpdated = true; break;}
    
        if(results.size() > 0){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

bool
OAIASRResponseBody::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

}


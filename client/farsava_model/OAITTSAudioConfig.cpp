/**
 * Farsava API
 * Farsava API. Speech Recognition and Text to Speech by applying powerful deep neural network models.
 *
 * OpenAPI spec version: 1.0.5
 * Contact: amir@amerandish.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAITTSAudioConfig.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Farsava {

OAITTSAudioConfig::OAITTSAudioConfig(QString json) {
    this->init();
    this->fromJson(json);
}

OAITTSAudioConfig::OAITTSAudioConfig() {
    this->init();
}

OAITTSAudioConfig::~OAITTSAudioConfig() {

}

void
OAITTSAudioConfig::init() {
    
    m_audio_encoding_isSet = false;
    m_audio_encoding_isValid = false;
    
    m_sample_rate_hertz_isSet = false;
    m_sample_rate_hertz_isValid = false;
    
    m_speaking_rate_isSet = false;
    m_speaking_rate_isValid = false;
    
    m_pitch_isSet = false;
    m_pitch_isValid = false;
    
    m_volume_gain_db_isSet = false;
    m_volume_gain_db_isValid = false;
    }

void
OAITTSAudioConfig::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAITTSAudioConfig::fromJsonObject(QJsonObject json) {
    
    m_audio_encoding_isValid = ::Farsava::fromJsonValue(audio_encoding, json[QString("audioEncoding")]);
    
    
    m_sample_rate_hertz_isValid = ::Farsava::fromJsonValue(sample_rate_hertz, json[QString("sampleRateHertz")]);
    
    
    m_speaking_rate_isValid = ::Farsava::fromJsonValue(speaking_rate, json[QString("speakingRate")]);
    
    
    m_pitch_isValid = ::Farsava::fromJsonValue(pitch, json[QString("pitch")]);
    
    
    m_volume_gain_db_isValid = ::Farsava::fromJsonValue(volume_gain_db, json[QString("volumeGainDb")]);
    
    
}

QString
OAITTSAudioConfig::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAITTSAudioConfig::asJsonObject() const {
    QJsonObject obj;
	if(audio_encoding.isSet()){
        obj.insert(QString("audioEncoding"), ::Farsava::toJsonValue(audio_encoding));
    }
	if(m_sample_rate_hertz_isSet){
        obj.insert(QString("sampleRateHertz"), ::Farsava::toJsonValue(sample_rate_hertz));
    }
	if(speaking_rate.isSet()){
        obj.insert(QString("speakingRate"), ::Farsava::toJsonValue(speaking_rate));
    }
	if(pitch.isSet()){
        obj.insert(QString("pitch"), ::Farsava::toJsonValue(pitch));
    }
	if(volume_gain_db.isSet()){
        obj.insert(QString("volumeGainDb"), ::Farsava::toJsonValue(volume_gain_db));
    }
    return obj;
}


OAIAudioEncoding
OAITTSAudioConfig::getAudioEncoding() const {
    return audio_encoding;
}
void
OAITTSAudioConfig::setAudioEncoding(const OAIAudioEncoding &audio_encoding) {
    this->audio_encoding = audio_encoding;
    this->m_audio_encoding_isSet = true;
}


qint32
OAITTSAudioConfig::getSampleRateHertz() const {
    return sample_rate_hertz;
}
void
OAITTSAudioConfig::setSampleRateHertz(const qint32 &sample_rate_hertz) {
    this->sample_rate_hertz = sample_rate_hertz;
    this->m_sample_rate_hertz_isSet = true;
}


OAINumber
OAITTSAudioConfig::getSpeakingRate() const {
    return speaking_rate;
}
void
OAITTSAudioConfig::setSpeakingRate(const OAINumber &speaking_rate) {
    this->speaking_rate = speaking_rate;
    this->m_speaking_rate_isSet = true;
}


OAINumber
OAITTSAudioConfig::getPitch() const {
    return pitch;
}
void
OAITTSAudioConfig::setPitch(const OAINumber &pitch) {
    this->pitch = pitch;
    this->m_pitch_isSet = true;
}


OAINumber
OAITTSAudioConfig::getVolumeGainDb() const {
    return volume_gain_db;
}
void
OAITTSAudioConfig::setVolumeGainDb(const OAINumber &volume_gain_db) {
    this->volume_gain_db = volume_gain_db;
    this->m_volume_gain_db_isSet = true;
}

bool
OAITTSAudioConfig::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(audio_encoding.isSet()){ isObjectUpdated = true; break;}
    
        if(m_sample_rate_hertz_isSet){ isObjectUpdated = true; break;}
    
        if(speaking_rate.isSet()){ isObjectUpdated = true; break;}
    
        if(pitch.isSet()){ isObjectUpdated = true; break;}
    
        if(volume_gain_db.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

bool
OAITTSAudioConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_audio_encoding_isValid && m_sample_rate_hertz_isValid && true;
}

}


/**
 * Farsava API
 * Farsava API. Speech Recognition and Text to Speech by applying powerful deep neural network models.
 *
 * OpenAPI spec version: 1.0.5
 * Contact: amir@amerandish.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIError.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Farsava {

OAIError::OAIError(QString json) {
    this->init();
    this->fromJson(json);
}

OAIError::OAIError() {
    this->init();
}

OAIError::~OAIError() {

}

void
OAIError::init() {
    
    m_status_isSet = false;
    m_status_isValid = false;
    
    m_detail_isSet = false;
    m_detail_isValid = false;
    
    m_title_isSet = false;
    m_title_isValid = false;
    
    m_type_isSet = false;
    m_type_isValid = false;
    }

void
OAIError::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIError::fromJsonObject(QJsonObject json) {
    
    m_status_isValid = ::Farsava::fromJsonValue(status, json[QString("status")]);
    
    
    m_detail_isValid = ::Farsava::fromJsonValue(detail, json[QString("detail")]);
    
    
    m_title_isValid = ::Farsava::fromJsonValue(title, json[QString("title")]);
    
    
    m_type_isValid = ::Farsava::fromJsonValue(type, json[QString("type")]);
    
    
}

QString
OAIError::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIError::asJsonObject() const {
    QJsonObject obj;
	if(m_status_isSet){
        obj.insert(QString("status"), ::Farsava::toJsonValue(status));
    }
	if(m_detail_isSet){
        obj.insert(QString("detail"), ::Farsava::toJsonValue(detail));
    }
	if(m_title_isSet){
        obj.insert(QString("title"), ::Farsava::toJsonValue(title));
    }
	if(m_type_isSet){
        obj.insert(QString("type"), ::Farsava::toJsonValue(type));
    }
    return obj;
}


QString
OAIError::getStatus() const {
    return status;
}
void
OAIError::setStatus(const QString &status) {
    this->status = status;
    this->m_status_isSet = true;
}


QString
OAIError::getDetail() const {
    return detail;
}
void
OAIError::setDetail(const QString &detail) {
    this->detail = detail;
    this->m_detail_isSet = true;
}


QString
OAIError::getTitle() const {
    return title;
}
void
OAIError::setTitle(const QString &title) {
    this->title = title;
    this->m_title_isSet = true;
}


QString
OAIError::getType() const {
    return type;
}
void
OAIError::setType(const QString &type) {
    this->type = type;
    this->m_type_isSet = true;
}

bool
OAIError::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(m_status_isSet){ isObjectUpdated = true; break;}
    
        if(m_detail_isSet){ isObjectUpdated = true; break;}
    
        if(m_title_isSet){ isObjectUpdated = true; break;}
    
        if(m_type_isSet){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

bool
OAIError::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_status_isValid && m_detail_isValid && true;
}

}

